package com.example.userschool.view.adapter;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.CompoundButton;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.example.userschool.R;import com.example.userschool.listener.AbseceListner;import com.example.userschool.model.Student;import com.example.userschool.model.StudentFound;import com.example.userschool.view.adapter.viewholder.AbseceTeacherRecyclerViewHolder;import java.util.List;public class AbseceTeacherRecyclerAdapter extends RecyclerView.Adapter<AbseceTeacherRecyclerViewHolder> {    private Context context;    private List<Student> students;    private List<StudentFound> studentFounds;    private AbseceListner abseceListner;    public AbseceTeacherRecyclerAdapter(Context context, List<Student> students, List<StudentFound> studentFounds, AbseceListner abseceListner) {        this.context = context;        this.students = students;        this.studentFounds = studentFounds;        this.abseceListner = abseceListner;    }    @NonNull    @Override    public AbseceTeacherRecyclerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from( context ).inflate( R.layout.item_table_abcese_teacher, parent, false );        return new AbseceTeacherRecyclerViewHolder( view );    }    @Override    public void onBindViewHolder(@NonNull AbseceTeacherRecyclerViewHolder holder, int position) {        holder.getTxtTableLayoutStudentName().setText( students.get( holder.getAdapterPosition() ).getName() );        holder.getCheckboxTableLayoutIsFound().setOnCheckedChangeListener( new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {                if (holder.getCheckboxTableLayoutIsFound().isChecked()) {                    studentFounds.get( holder.getAdapterPosition() ).setFound( 1 );                } else {                    studentFounds.get( holder.getAdapterPosition() ).setFound( 0 );                }                abseceListner.onAbseceChange( studentFounds );            }        } );    }    @Override    public int getItemCount() {        return students.size();    }    public void setData(List<Student> students) {        this.students = students;        notifyDataSetChanged();    }}