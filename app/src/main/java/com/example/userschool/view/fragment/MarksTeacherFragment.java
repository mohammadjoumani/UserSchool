package com.example.userschool.view.fragment;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TableLayout;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.userschool.R;import com.example.userschool.connectdb.ConnectDB;import com.example.userschool.listener.MarksListner;import com.example.userschool.model.Absece;import com.example.userschool.model.Marks;import com.example.userschool.model.Student;import com.example.userschool.model.StudentFound;import com.example.userschool.model.StudentMark;import com.example.userschool.query.TeacherQuery;import com.example.userschool.view.activity.TeacherActivity;import com.example.userschool.view.adapter.AbseceTeacherRecyclerAdapter;import com.example.userschool.view.adapter.MarkTeacherRecyclerAdapter;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Locale;import static android.content.Context.MODE_PRIVATE;public class MarksTeacherFragment extends Fragment implements MarksListner {    private boolean state = true;    private ProgressBar progressBarMarksTeacherFragment;    private ImageView imgMarksTeacherFragmentEmpty;    private TableLayout tableLayoutMarksTeacherFragment;    private ImageButton imgBtnMarksTeacherFragmentNew;    private RecyclerView recyclerFragmentMarksTeacher;    private RecyclerView.LayoutManager layoutManagerMarks;    private List<Student> students;    private MarkTeacherRecyclerAdapter markTeacherRecyclerAdapter;    private List<Marks> marks;    private List<StudentMark> studentMarks;    private int subjectID;    private ConnectDB connectDB;    private TeacherQuery teacherQuery;    private SharedPreferences sharedPreferences;    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        View view = inflater.inflate( R.layout.fragment_marks_teacher, container, false );        sharedPreferences = getActivity().getSharedPreferences( "subjectID", MODE_PRIVATE );        subjectID = sharedPreferences.getInt( "subjectID", 0 );        connectDB = new ConnectDB();        teacherQuery = new TeacherQuery( getContext() );        marks = new ArrayList<>();        studentMarks = new ArrayList<>();        tableLayoutMarksTeacherFragment = view.findViewById( R.id.tableLayoutMarksTeacherFragment );        progressBarMarksTeacherFragment = view.findViewById( R.id.progressBarMarksTeacherFragment );        imgMarksTeacherFragmentEmpty = view.findViewById( R.id.imgMarksTeacherFragmentEmpty );        imgBtnMarksTeacherFragmentNew = view.findViewById( R.id.imgBtnMarksTeacherFragmentNew );        recyclerFragmentMarksTeacher = view.findViewById( R.id.recyclerFragmentMarksTeacher );        //recycler for show studnet Marks        recyclerFragmentMarksTeacher.setHasFixedSize( true );        layoutManagerMarks = new LinearLayoutManager( getActivity(), RecyclerView.VERTICAL, false );        recyclerFragmentMarksTeacher.setLayoutManager( layoutManagerMarks );        students = new ArrayList<>();        markTeacherRecyclerAdapter = new MarkTeacherRecyclerAdapter( getActivity(), students, studentMarks, this::onMarksChange );        recyclerFragmentMarksTeacher.setAdapter( markTeacherRecyclerAdapter );        tableLayoutMarksTeacherFragment.setVisibility( View.GONE );        imgMarksTeacherFragmentEmpty.setImageResource( R.drawable.ic_add_file );        imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );        imgBtnMarksTeacherFragmentNew.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View view) {                if (state == true) {                    progressBarMarksTeacherFragment.setVisibility( View.VISIBLE );                    imgMarksTeacherFragmentEmpty.setVisibility( View.GONE );                    teacherQuery.callTaskGetStudentByClassID( ((TeacherActivity) getActivity()).getClassID() );                    IntentFilter intentFilterStudentByClassID = new IntentFilter( "studentsByClassID" );                    requireActivity().registerReceiver( broadcastReceiverStudentByClassID, intentFilterStudentByClassID );                    state = false;                } else if (state == false) {                    tableLayoutMarksTeacherFragment.setVisibility( View.GONE );                    recyclerFragmentMarksTeacher.setVisibility( View.GONE );                    imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );                    for (int i = 0; i < students.size(); i++) {                        marks.add( new Marks( 0, subjectID, studentMarks.get( i ).getStudentID(),                                studentMarks.get( i ).getPractical(), studentMarks.get( i ).getThearitical() ) );                    }                    teacherQuery.callTaskInsertMarks( marks );                    IntentFilter intentFilterInsertMarks = new IntentFilter( "InsertMarksState" );                    requireActivity().registerReceiver( broadcastReceiverInsertMarks, intentFilterInsertMarks );                    state = true;                }            }        } );        return view;    }    // get student By classID    final BroadcastReceiver broadcastReceiverStudentByClassID = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (connectDB.CONN() == null) {                progressBarMarksTeacherFragment.setVisibility( View.GONE );                imgMarksTeacherFragmentEmpty.setImageResource( R.drawable.ic_disconnect );                imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );                tableLayoutMarksTeacherFragment.setVisibility( View.GONE );                return;            }            students = teacherQuery.getStudents();            if (students.size() == 0) {                imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );            } else {                imgMarksTeacherFragmentEmpty.setVisibility( View.GONE );            }            for (Student student : students) {                studentMarks.add( new StudentMark( student.getId(), 0, 0 ) );            }            markTeacherRecyclerAdapter.setData( students );            progressBarMarksTeacherFragment.setVisibility( View.GONE );            tableLayoutMarksTeacherFragment.setVisibility( View.VISIBLE );            imgBtnMarksTeacherFragmentNew.setBackgroundResource( R.drawable.ic_check );        }    };    //for Insert List Marks to dataBase    BroadcastReceiver broadcastReceiverInsertMarks = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (connectDB.CONN() == null) {                progressBarMarksTeacherFragment.setVisibility( View.GONE );                imgMarksTeacherFragmentEmpty.setImageResource( R.drawable.ic_disconnect );                imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );                tableLayoutMarksTeacherFragment.setVisibility( View.GONE );                return;            }            if (teacherQuery.getStateInsertMarks()) {                imgMarksTeacherFragmentEmpty.setImageResource( R.drawable.ic_done );                imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );            } else {                imgMarksTeacherFragmentEmpty.setImageResource( R.drawable.ic_cancel );                imgMarksTeacherFragmentEmpty.setVisibility( View.VISIBLE );            }            imgBtnMarksTeacherFragmentNew.setBackgroundResource( R.drawable.ic_add );        }    };    @Override    public void onMarksChange(List<StudentMark> studentMarks) {        this.studentMarks = studentMarks;        for (int i=0;i<studentMarks.size();i++){            Log.d( "size",studentMarks.get( i ).getStudentID()+"    "+                    studentMarks.get( i ).getPractical()+"     "+                    studentMarks.get( i ).getThearitical());        }    }}