package com.example.userschool.query;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.util.Log;import com.example.userschool.connectdb.ConnectDB;import com.example.userschool.model.Absece;import com.example.userschool.model.Marks;import com.example.userschool.model.Student;import com.example.userschool.model.Teacher;import java.sql.Connection;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.Statement;import java.util.ArrayList;import java.util.List;public class TeacherQuery {    private Context context;    private Teacher teacher = new Teacher();    private List<Student> students = new ArrayList<>();    private boolean isTrue;    private boolean insertAbseceISTrue;    private boolean insertMarksISTrue;    public TeacherQuery(Context context) {        this.context = context;    }    ///region Teacher Info    public void setTeacher(Teacher teacher) {        this.teacher = teacher;    }    public Teacher getTeacher() {        return teacher;    }    public void callTaskGetInfoTeacher(int teacherID) {        new TaskGetInfoTeacher( teacherID ).execute( "" );    }    //endregion    ///region Student By ClassID    public void setStudentByClassID(List<Student> students) {        this.students = students;    }    public List<Student> getStudents() {        return students;    }    public void callTaskGetStudentByClassID(int classID) {        new TaskGetStudentByClassID( classID ).execute( "" );    }    //endregion    ///region state    public void setStateAbsece(boolean isSuccess) {        this.isTrue = isSuccess;    }    public boolean getStateAbsece() {        return isTrue;    }    public void callTaskGetStateAbsece(int classID, int subjectID) {        new TaskGetStateAbsece( classID, subjectID ).execute( "" );    }    //endregion    //region Insert List Absece    public void setStateInsertAbsece(Boolean isSuccess) {        this.insertAbseceISTrue = isSuccess;    }    public boolean getStateInsertAbsece() {        return insertAbseceISTrue;    }    public void callTaskInsertAbseces(List<Absece> abseces) {        new TaskInsertAbseces( abseces ).execute( "" );    }    //endregion    ///region Insert List Marks    public void setStateInsertMarks(Boolean isSuccess) {        this.insertMarksISTrue = isSuccess;    }    public Boolean getStateInsertMarks() {        return insertMarksISTrue;    }    public void callTaskInsertMarks(List<Marks> marks) {        new TaskInsertMarks( marks ).execute( "" );    }    //endregion    //for get Info student    private class TaskGetInfoTeacher extends AsyncTask<String, String, Teacher> {        private boolean isSuccess = false;        private int teacherID;        public TaskGetInfoTeacher(int teacherID) {            this.teacherID = teacherID;        }        @Override        protected Teacher doInBackground(String... strings) {            Teacher teacher = new Teacher();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT  teacher.name  ,subject.name\n" +                            "FROM teacher , subject \n" +                            "WHERE (teacher.subjectID=subject.id) and " +                            "(teacher.id='" + teacherID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        teacher.setName( resultSet.getString( 1 ) );                        teacher.setClassName( resultSet.getString( 2 ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                //state = "Exceptions" + ex;            }            return teacher;        }        @Override        protected void onPostExecute(Teacher teacher) {            Intent intent = new Intent( "teacherInfo" );            context.sendBroadcast( intent );            if (isSuccess) {                setTeacher( teacher );            }        }    }    //for get student by classID    private class TaskGetStudentByClassID extends AsyncTask<String, String, List<Student>> {        private boolean isSuccess = false;        private int classID;        public TaskGetStudentByClassID(int classID) {            this.classID = classID;        }        @Override        protected List<Student> doInBackground(String... strings) {            List<Student> students = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT id , name \n" +                            "FROM student  \n" +                            "WHERE (classID='" + classID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        students.add( new Student( resultSet.getInt( 1 ), resultSet.getString( 2 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                //state = "Exceptions" + ex;            }            return students;        }        @Override        protected void onPostExecute(List<Student> students) {            Intent intent = new Intent( "studentsByClassID" );            context.sendBroadcast( intent );            if (isSuccess) {                setStudentByClassID( students );            }        }    }    //for get if take absecec or not    private class TaskGetStateAbsece extends AsyncTask<String, String, List<Absece>> {        private boolean isSuccess = false;        private int classID;        private int subjcetID;        public TaskGetStateAbsece(int classID, int subjcetID) {            this.classID = classID;            this.subjcetID = subjcetID;        }        @Override        protected List<Absece> doInBackground(String... strings) {            List<Absece> abseces = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT abseceandattdance.studentID\n" +                            "FROM abseceandattdance , student, class ,subject\n" +                            "WHERE (abseceandattdance.studentID=student.id)\n" +                            "AND (student.classID=class.id)\n" +                            "AND (abseceandattdance.subjectID=subject.id)\n" +                            "AND (abseceandattdance.date='2021-04-05')\n" +                            "AND (student.classID='" + classID + "')\n" +                            "AND (abseceandattdance.subjectID='" + subjcetID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        abseces.add( new Absece( resultSet.getInt( 1 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                //state = "Exceptions" + ex;            }            return abseces;        }        @Override        protected void onPostExecute(List<Absece> abseces) {            Intent intent = new Intent( "AbseceISTrue" );            context.sendBroadcast( intent );            if (isSuccess) {                if (abseces.size() == 0) {                    setStateAbsece( isSuccess );                }            }        }    }    //for Insert Absece for student in class    private class TaskInsertAbseces extends AsyncTask<String, String, Boolean> {        private boolean isSuccess = false;        private List<Absece> abseceList;        private int id;        public TaskInsertAbseces(List<Absece> abseces) {            this.abseceList = abseces;        }        @Override        protected Boolean doInBackground(String... strings) {            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    for (int i = 0; i < abseceList.size(); i++) {                        String queryID = "select Max(id) from abseceandattdance";                        Statement stmt1 = connection.createStatement();                        ResultSet resultSet = stmt1.executeQuery( queryID );                        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                        while (resultSet.next()) {                            id = Integer.parseInt( resultSet.getString( 1 ) ) + 1;                        }                        String query = "insert into abseceandattdance values('" + id + "', '" + abseceList.get( i ).getStudentID()                                + "','" + abseceList.get( i ).getSubjectID() + "','" + abseceList.get( i ).isFound() + "'" +                                ",'" + abseceList.get( i ).getDate() + "')";                        Statement stmt = connection.createStatement();                        stmt.executeUpdate( query );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                //state = "Exceptions" + ex;            }            return isSuccess;        }        @Override        protected void onPostExecute(Boolean isSuccess) {            Intent intent = new Intent( "InsertAbseceState" );            context.sendBroadcast( intent );            if (isSuccess) {                setStateInsertAbsece( isSuccess );            }        }    }    //for Insert Marks for student in class    private class TaskInsertMarks extends AsyncTask<String, String, Boolean> {        private boolean isSuccess = false;        private List<Marks> marksList;        private int id;        public TaskInsertMarks(List<Marks> marks) {            this.marksList = marks;        }        @Override        protected Boolean doInBackground(String... strings) {            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    for (int i = 0; i < marksList.size(); i++) {                        String queryID = "select Max(id) from marks";                        Statement stmt1 = connection.createStatement();                        ResultSet resultSet = stmt1.executeQuery( queryID );                        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                        while (resultSet.next()) {                            id = Integer.parseInt( resultSet.getString( 1 ) ) + 1;                        }                        Log.d( "idddddd", id + "" );                        String query = "insert into marks values('" + id + "', '" + marksList.get( i ).getStudentID()                                + "','" + marksList.get( i ).getSubjectID() + "','" + marksList.get( i ).getPractical() + "'" +                                ",'" + marksList.get( i ).getThearitical() + "')";                        Statement stmt = connection.createStatement();                        stmt.executeUpdate( query );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                //state = "Exceptions" + ex;            }            return isSuccess;        }        @Override        protected void onPostExecute(Boolean isSuccess) {            Intent intent = new Intent( "InsertMarksState" );            context.sendBroadcast( intent );            if (isSuccess) {                setStateInsertMarks( isSuccess );            }        }    }}