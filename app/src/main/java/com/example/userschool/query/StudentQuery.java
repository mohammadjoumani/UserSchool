package com.example.userschool.query;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.util.Log;import com.example.userschool.connectdb.ConnectDB;import com.example.userschool.model.Absece;import com.example.userschool.model.Marks;import com.example.userschool.model.Student;import java.sql.Connection;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.Statement;import java.util.ArrayList;import java.util.List;public class StudentQuery {    private Student student = new Student();    private List<Marks> marks = new ArrayList<>();    private List<Absece> abseces = new ArrayList<>();    private Context context;    public StudentQuery(Context context) {        this.context = context;    }    ///region Info Studnet    public void setStudent(Student student) {        this.student = student;    }    public Student getStudent() {        return student;    }    public void callTaskGetStudentInfo(int studentID) {        new TaskGetStudentInfo( studentID ).execute( "" );    }    //endregion    ///region marks    public void setMarks(List<Marks> marks) {        this.marks = marks;    }    public List<Marks> getMarks() {        return marks;    }    public void callTaskGetMarks(int studentID) {        new TaskGetMarks( studentID ).execute( "" );    }    //endregion    ///region Absece    public void setAbsece(List<Absece> abseces) {        this.abseces = abseces;    }    public List<Absece> getAbseces() {        return abseces;    }    public void callTaskGetAbsece(int studentID) {        new TaskGetAbsece( studentID ).execute( "" );    }    //endregion    //region AbseceByDate    public void setAbseceByDate(List<Absece> abseces) {        this.abseces = abseces;    }    public List<Absece> getAbseceByDate() {        return abseces;    }    public void callTaskGetAbseceByDate(int studentID, String date) {        new TaskGetAbseceByDate( studentID, date ).execute( "" );    }    //endregion    //for get Info student    private class TaskGetStudentInfo extends AsyncTask<String, String, Student> {        private String state = "";        private boolean isSuccess = false;        private int studentID;        public TaskGetStudentInfo(int studentID) {            this.studentID = studentID;        }        @Override        protected Student doInBackground(String... strings) {            Student student = new Student();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT  student.name , student.phone ,class.name\n" +                            "FROM student , class \n" +                            "WHERE (student.classID=class.id) and " +                            "(student.id='" + studentID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        student.setName( resultSet.getString( 1 ) );                        student.setPhone( resultSet.getString( 2 ) );                        student.setClassName( resultSet.getString( 3 ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return student;        }        @Override        protected void onPostExecute(Student student) {            Intent intent = new Intent( "studentInfo" );            context.sendBroadcast( intent );            if (isSuccess) {                setStudent( student );            }        }    }    //for get marks for any studnet    private class TaskGetMarks extends AsyncTask<String, String, List<Marks>> {        private String state = "";        private boolean isSuccess = false;        private int studentID;        public TaskGetMarks(int studentID) {            this.studentID = studentID;        }        @Override        protected List<Marks> doInBackground(String... strings) {            List<Marks> marks = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT  subject.name , marks.practical ,marks.thearitical ," +                            "marks.thearitical+marks.practical\n" +                            "FROM subject , marks , student \n" +                            "WHERE (marks.subjectID=subject.id) and " +                            "(marks.studentID=student.id) and " +                            "(student.id='" + studentID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        marks.add( new Marks( resultSet.getString( 1 ), resultSet.getInt( 2 )                                , resultSet.getInt( 3 ), resultSet.getInt( 4 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return marks;        }        @Override        protected void onPostExecute(List<Marks> marks) {            Intent intent = new Intent( "listMarks" );            context.sendBroadcast( intent );            if (isSuccess) {                setMarks( marks );            }        }    }    //for get absece for any studnet    private class TaskGetAbsece extends AsyncTask<String, String, List<Absece>> {        private String state = "";        private boolean isSuccess = false;        private int studentID;        public TaskGetAbsece(int studentID) {            this.studentID = studentID;        }        @Override        protected List<Absece> doInBackground(String... strings) {            List<Absece> abseces = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT  subject.name , abseceandattdance.date ,abseceandattdance.find \n" +                            "FROM subject , abseceandattdance , student \n" +                            "WHERE (abseceandattdance.subjectID=subject.id) and\n" +                            "(abseceandattdance.studentID=student.id) and \n" +                            "(student.id='" + studentID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        abseces.add( new Absece( resultSet.getString( 1 ), resultSet.getInt( 3 )                                , resultSet.getString( 2 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return abseces;        }        @Override        protected void onPostExecute(List<Absece> abseces) {            Intent intent = new Intent( "listAbsece" );            context.sendBroadcast( intent );            if (isSuccess) {                setAbsece( abseces );            }        }    }    //for get absece by date for any studnet    private class TaskGetAbseceByDate extends AsyncTask<String, String, List<Absece>> {        private String state = "";        private boolean isSuccess = false;        private int studentID;        private String date;        public TaskGetAbseceByDate(int studentID, String date) {            this.studentID = studentID;            this.date = date;        }        @Override        protected List<Absece> doInBackground(String... strings) {            List<Absece> abseces = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT  subject.name , abseceandattdance.date ,abseceandattdance.find \n" +                            "FROM subject , abseceandattdance , student \n" +                            "WHERE (abseceandattdance.subjectID=subject.id) and\n" +                            "(abseceandattdance.studentID=student.id) and \n" +                            "(student.id='" + studentID + "') and" +                            "(abseceandattdance.date='" + date + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        abseces.add( new Absece( resultSet.getString( 1 ), resultSet.getInt( 3 )                                , resultSet.getString( 2 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return abseces;        }        @Override        protected void onPostExecute(List<Absece> abseces) {            Intent intent = new Intent( "listAbseceByDate" );            context.sendBroadcast( intent );            if (isSuccess) {                setAbseceByDate( abseces );            }        }    }}